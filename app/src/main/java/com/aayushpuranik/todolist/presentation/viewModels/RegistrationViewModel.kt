package com.aayushpuranik.todolist.presentation.viewModelsimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.aayushpuranik.todolist.domain.model.Personimport com.aayushpuranik.todolist.domain.useCase.RegistrationUserCaseimport com.aayushpuranik.todolist.presentation.UIStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass RegistrationViewModel @Inject constructor(): ViewModel() {    val uiState: MutableLiveData<UIState>  by lazy {        MutableLiveData<UIState>()    }    @Inject    lateinit var userCase: RegistrationUserCase    fun addContact(person: Person) {        CoroutineScope(Dispatchers.Main).launch {            val result = userCase.execute(person)            result.onSuccess {                uiState.value = UIState.Success("Success")            }.onFailure { exception ->                handleValidationError(exception = exception)            }        }    }    private fun handleValidationError(exception: Throwable) {        uiState.value = UIState.Error(exception.message ?: "Something went wrong")    }}